name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    strategy:
      matrix:
        platform:
          - os: macos-latest
            target: darwin/amd64
            name: macOS-Intel
          - os: macos-latest
            target: darwin/arm64
            name: macOS-Apple-Silicon
          - os: windows-latest
            target: windows/amd64
            name: Windows-x64
          - os: ubuntu-latest
            target: linux/amd64
            name: Linux-x64

    runs-on: ${{ matrix.platform.os }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'

    - name: Install Wails
      run: go install github.com/wailsapp/wails/v2/cmd/wails@latest

    - name: Install Linux dependencies
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libvips-dev

    - name: Install macOS dependencies
      if: matrix.platform.os == 'macos-latest'
      run: |
        brew install vips

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "push" ]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION=${{ github.event.inputs.version }}
        fi
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "version_number=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Update version files
      run: |
        VERSION_NUMBER="${{ steps.version.outputs.version_number }}"
        
        # Update version.json
        jq --arg version "$VERSION_NUMBER" '.version = $version' version.json > tmp.json && mv tmp.json version.json
        
        # Update frontend package.json
        cd frontend
        npm version $VERSION_NUMBER --no-git-tag-version
        cd ..

    - name: Build application
      run: |
        wails build -platform ${{ matrix.platform.target }} -ldflags "-X main.version=${{ steps.version.outputs.version_number }}"

    - name: Package macOS app
      if: matrix.platform.os == 'macos-latest'
      run: |
        # Copy version file to app bundle
        cp version.json "build/bin/识文君.app/Contents/Resources/"

        # Fix Info.plist executable name (name vs outputfilename issue)
        # wails.json: "name": "识文君", "outputfilename": "pdfSeer"
        # Info.plist uses name but executable is outputfilename
        sed -i '' 's/<string>识文君<\/string>/<string>pdfSeer<\/string>/g' "build/bin/识文君.app/Contents/Info.plist"

        # Verify the fix worked
        echo "Checking Info.plist CFBundleExecutable:"
        grep -A1 "CFBundleExecutable" "build/bin/识文君.app/Contents/Info.plist"

        # Verify executable exists
        echo "Checking executable file:"
        ls -la "build/bin/识文君.app/Contents/MacOS/"

        # Remove extended attributes
        xattr -cr "build/bin/识文君.app"

        # Create DMG
        mkdir -p dist
        hdiutil create -volname "识文君 ${{ steps.version.outputs.version }}" -srcfolder "build/bin/识文君.app" -ov -format UDZO "dist/识文君-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.dmg"

    - name: Package Windows app
      if: matrix.platform.os == 'windows-latest'
      run: |
        mkdir -p dist
        cp version.json build/bin/
        Compress-Archive -Path "build/bin/*" -DestinationPath "dist/识文君-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.zip"

    - name: Package Linux app
      if: matrix.platform.os == 'ubuntu-latest'
      run: |
        mkdir -p dist
        cp version.json build/bin/
        tar -czf "dist/识文君-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}.tar.gz" -C build/bin .

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: 识文君-${{ steps.version.outputs.version }}-${{ matrix.platform.name }}
        path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/**/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
